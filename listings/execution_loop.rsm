/// Receives a command and attempts to execute the contents.
pub fn on_command(
    &mut self,
    command_to_execute: impl Iterator<Item = u8>,
    set_cmd_duration: bool,
) -> std::result::Result<(), IonError> {
    // ... some code before 
    // Added by workaround
    let mut line_number: usize = 0; (*\label{code:execute_loop_line_init}*) 
    for stmt in command_to_execute.batching(
        |cmd| 
        Terminator::new(cmd).terminate()) { (*\label{code:execute_loop}*) 
        // Go through all of the statements and build up 
        // the block stack
        // When block is done return statement for execution.
        for statement in StatementSplitter::new(&stmt) { 
            // Added by workaround
            line_number += 1; (*\label{code:execute_loop_line_increment}*) 
            let statement = parse_and_validate(statement?)?;
            if let Some(stm) = Self::insert_statement(
                  &mut self.flow_control, statement
              )? {
                  self.execute_statement(&stm)?; 
            }
        }
    }
    // ... some code after
    Ok(())
}
